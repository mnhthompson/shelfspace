@page "/login"
@inject HttpClient HttpClient;
@using System.Net.Http.Json
@inject NavigationManager NavigationManager;
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@using ShelfSpace.Models 
@inject UserState UserState

<EditForm Model="userCred" OnValidSubmit="OnSubmit" FormName="login">
  <DataAnnotationsValidator />
  <ValidationSummary />
  <div data-mdb-input-init class="form-outline mb-4">
    <InputText type="email" id="form2Example1" class="form-control" @bind-Value="userCred.Email" />
    <label class="form-label" for="form2Example1">Email address</label>
  </div>

  <!-- Password input -->
  <div data-mdb-input-init class="form-outline mb-4">
    <InputText type="password" id="form2Example2" class="form-control" @bind-Value="userCred.Password"/>
    <label class="form-label" for="form2Example2">Password</label>
  </div>

  <!-- Submit button -->
  <button type="submit" data-mdb-button-init data-mdb-ripple-init class="btn btn-primary btn-block mb-4">Sign in</button>
    @if (!string.IsNullOrEmpty(loginError))
{
    <div class="alert alert-danger">
        @loginError
    </div>
}
  <!-- Register buttons -->
  <div class="text-center">
    <p>Not a member? <a href="/registration">Register</a></p>
  </div>
</EditForm>

@code {
    private UserCred userCred = new UserCred();
    private string loginError;

    private async Task OnSubmit()
    {
        try
        {
            var response = await HttpClient.PostAsJsonAsync("api/media/Authenticate", userCred);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<LoginResponse>();
                await LocalStorage.SetItemAsync("authToken", result.Token); // Save token in local storage

                
                // Redirect to a secure page after login
                NavigationManager.NavigateTo("/profile/{result.User.Id}"); // Change the redirect as needed
            }
            else
            {
                loginError = "Invalid credentials. Please try again.";
            }
        }
        catch (Exception ex)
        {
            loginError = "An error occurred. Please try again later.";
            Console.WriteLine(ex.Message);
        }
    }

    public class LoginResponse
    {
        public string Token { get; set; }
        public DateTime ExpiresIn { get; set; }
        public User User { get; set; }
    }
}